// <auto-generated />
using System;
using CarDealerProject.Repositories.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarDealerProject.Migrations
{
    [DbContext(typeof(CarDealerDBContext))]
    partial class CarDealerDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.BookingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimePeriod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("ModelId");

                    b.ToTable("BookingEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Acceleration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DealerId")
                        .HasColumnType("int");

                    b.Property<string>("Displacement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailble")
                        .HasColumnType("bit");

                    b.Property<string>("Length")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaximumSpeed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Torque")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Transmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<string>("Upholstery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Width")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealerId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TypeId");

                    b.ToTable("CarEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.CarEquipmentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarEquipmentEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.DealerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DealerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealerPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DealerWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(20,17)");

                    b.Property<decimal>("Longtitude")
                        .HasColumnType("decimal(20,17)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DealerEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.ImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImagePath")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("InsertedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ImageEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.ModelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ModelEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.ServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.TypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeEntity");
                });

            modelBuilder.Entity("CarEntityCarEquipmentEntity", b =>
                {
                    b.Property<int>("CarsId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int");

                    b.HasKey("CarsId", "EquipmentsId");

                    b.HasIndex("EquipmentsId");

                    b.ToTable("CarEntityCarEquipmentEntity");
                });

            modelBuilder.Entity("CarEntityImageEntity", b =>
                {
                    b.Property<int>("CarsId")
                        .HasColumnType("int");

                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.HasKey("CarsId", "ImagesId");

                    b.HasIndex("ImagesId");

                    b.ToTable("CarEntityImageEntity");
                });

            modelBuilder.Entity("DealerEntityServiceEntity", b =>
                {
                    b.Property<int>("DealersId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("DealersId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("DealerEntityServiceEntity");
                });

            modelBuilder.Entity("ImageEntityModelEntity", b =>
                {
                    b.Property<int>("ImagesId")
                        .HasColumnType("int");

                    b.Property<int>("ModelsId")
                        .HasColumnType("int");

                    b.HasKey("ImagesId", "ModelsId");

                    b.HasIndex("ModelsId");

                    b.ToTable("ImageEntityModelEntity");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.BookingEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.DealerEntity", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("CarDealerProject.Repositories.Entities.ModelEntity", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.Navigation("Dealer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.CarEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.DealerEntity", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId");

                    b.HasOne("CarDealerProject.Repositories.Entities.ModelEntity", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("CarDealerProject.Repositories.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Dealer");

                    b.Navigation("Model");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CarDealerProject.Repositories.Entities.ModelEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.TypeEntity", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("CarEntityCarEquipmentEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.CarEntity", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealerProject.Repositories.Entities.CarEquipmentEntity", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarEntityImageEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.CarEntity", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealerProject.Repositories.Entities.ImageEntity", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DealerEntityServiceEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.DealerEntity", null)
                        .WithMany()
                        .HasForeignKey("DealersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealerProject.Repositories.Entities.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageEntityModelEntity", b =>
                {
                    b.HasOne("CarDealerProject.Repositories.Entities.ImageEntity", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarDealerProject.Repositories.Entities.ModelEntity", null)
                        .WithMany()
                        .HasForeignKey("ModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
